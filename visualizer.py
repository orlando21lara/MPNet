import matplotlib
#matplotlib.use('Agg')
import matplotlib.pyplot as plt
import struct
import numpy as np
import argparse

dataset_dir = '/media/orlando21/DATA/UPenn/Courses/ESE546PrinciplesOfDeepLearning/final_project/code/MPNet/dataset/'

def main(args):
    # Visualize point cloud (obstacles)
    obs = []
    temp=np.fromfile(args.obs_file)
    obs.append(temp)
    obs = np.array(obs).astype(np.float32).reshape(-1,2)
    plt.scatter(obs[:,0], obs[:,1], c='blue')

    # # Visualize path generated by Expert
    # path=np.fromfile(args.path_file)
    # # path = np.loadtxt(args.path_file)
    # print("Path shape: ", path.shape)
    # print("Path:\n", path)
    # path = path.reshape(-1, 2)
    # path_x = []
    # path_y = []
    # for i in range(len(path)):
    #     path_x.append(path[i][0])
    #     path_y.append(path[i][1])

    # plt.plot(path_x, path_y, c='r', marker='o')

    # Visualize path generated by MPNet
    path=np.fromfile(args.mlp_path_file)
    path = path.reshape(-1, 2)
    path_x = []
    path_y = []
    for i in range(len(path)):
        path_x.append(path[i][0])
        path_y.append(path[i][1])

    plt.plot(path_x, path_y, c='r', marker='o', label='MPNet')

    # Visualize path generated by LSTM + MPNet
    path=np.fromfile(args.lstm_mlp_path_file)
    path = path.reshape(-1, 2)
    path_x = []
    path_y = []
    for i in range(len(path)):
        path_x.append(path[i][0])
        path_y.append(path[i][1])
    
    plt.plot(path_x, path_y, c='g', marker='o', label='LSTM-MPL', zorder=1)


    # Plot the start and End points on top
    plt.scatter(path_x[0], path_y[0], c='y', marker='*', s=150,label='Start', zorder=3)
    plt.scatter(path_x[-1], path_y[-1], c='k', marker='*', s=150, label='Goal', zorder=3)

    plt.legend()
    # Set the title
    plt.title('Environment 9, Path 0')


    plt.show()


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--obs_file',           type=str, default='dataset/obs_cloud/obc109.dat',    help='obstacle point cloud file')
    parser.add_argument('--mlp_path_file',      type=str, default='results/mlp_e9_path0.dat',      help='MPNet path file')
    parser.add_argument('--lstm_mlp_path_file', type=str, default='results/lstm_mlp_e9_path0.dat', help='LSTM + MPNet path file')
    # parser.add_argument('--mlp_path_file',      type=str, default='the_path.dat',      help='MPNet path file')
    # parser.add_argument('--lstm_mlp_path_file', type=str, default='lstm_mlp_path0.dat', help='LSTM + MPNet path file')
    args = parser.parse_args()

    print("Arguments:\n", args)

    main(args)
